* Requirement
** Restful API using Python or Java that performs a search
   1) The request should accept a search string as input.
   2) The data to be searched should be in a MongoDB database.
   3) The response should be formatted in JSON.
** The API should handle at least one scalability concern
** The API should handle at least one security concern.
** Good programming best practices / Ability to write Reusable Code / Testing Strategy
* Planning
** Local Testing
   - Set up Mongodb with sample data
   - Set up Flask Backend in Python
   - Connection between Flask and Mongodb
   - Design Search REST API and Research Best Practice (filtering)
   - Set up simple Angular Frontend App that interacts with Search API
** Scalability and Security
   - Research Scalability concern and Implementation
   - Research Security concern and Implementation
** Deployment
   - Set up Mongodb in Google VM instance
   - Deploy Flask backend in GCF that is able to connect to Mongodb in VM
   - Deploy Frontend in Stackblitz with GCF base URL above

* Local Testing Logs
** Set up Mongodb with Sample Data
  1) Research for Sample Data and Found [[https://medium.com/dbkoda/mongodb-sample-collections-52d6a7745908][MongoDB sample Collections]]
  2) Settle on Sakila DB
  3) Import .json files to Mongo DB
	 #+begin_src shell
# New Database
> use sakila
# New Collection
> db.createCollection('customers')
# Import json into DB; If collection doesn't exist, it will create new one
$ mongoimport --db sakila --collection customers --file customers.json
	 #+end_src
** Set up Flask Backend in Python
  1) Research and find Flask tutorial in [[https://medium.freecodecamp.org/how-to-build-a-web-application-using-flask-and-deploy-it-to-the-cloud-3551c985e492][freeCodeCamp]]
  2) Create new conda environemtn
     #+begin_src shell
$conda create -n webServiceChallenge python=3.7 anaconda
$conda activate webServiceChallenge
     #+end_src
  3) Create main.py, and run using the following shell command for auto-reload capability
	 #+begin_src shell
	 FLASK_APP=main.py FLASK_DEBUG=1 python -m flask run
	 #+end_src
** Connection between Flask and Mongodb
  1) Install PyMongo in Conda
  2) Create jupyter notebook to test connection
  3) Create simple testing code with instruction in [[https://api.mongodb.com/python/current/tutorial.html][PyMongo Documentation]]
	 #+begin_src python
from pymongo import MongoClient
client = MongoClient('localhost', 27017)

db = client['sakila']
customers = db['customers']

customers.find_one()
	 #+end_src
  4)

** Design Search REST API and Research Best Practice (filtering)
   - [[https://hackernoon.com/restful-api-design-step-by-step-guide-2f2c9f9fcdbf][Principle of Designing RESTful APIs from Hackermoon]]
   - Configure request handler in Flask to return json; also load url param into Json [[http://api.mongodb.com/python/current/api/bson/json_util.html][json_util man page]]
	 #+begin_src python
from bson.json_util import dumps, loads
@app.route("/<collection>")
def searchCollection(collection):
    q = loads(request.args.get('q'))
    print (q)
    docs = db[collection].find(q)
    return dumps(docs)
	 #+end_src
   - Initial API Design
	 | URL                          | Type | Description                                                  | Example                       |
	 |------------------------------+------+--------------------------------------------------------------+-------------------------------|
	 | /<collection>?q=<mongoQuery> | GET  | Fetch all docs in <collection> that matches the <mongoQuery> | /films/?q={"Tile": "Avenger"} |
	 | /<collection>/<id>           | GET  | Fetch specific doc in <collection> with specific <id>        | /customer/10                  |
	 | /keys/<collection>           | GET  | Fetch all keys names in top level from <collection>          | /keys/films                   |
	 |                              |      |                                                              |                               |


** Set up Simple Angular Frontend
   1) Reuse code from Augular Tour-of-hero Tutorial for Search Bar
   2) Set up Sakila Service
	  #+begin_src typescript
// In app.module.ts
import { HttpClientModule }    from '@angular/common/http';
// Import it in imports: array
// In sakila.service.ts
import { HttpClient, HttpHeaders } from '@angular/common/http';
// Inject HttpClient into the constructor in a private property called http.

	  #+end_src
   3) Follow Tutorial to set up search bar

* Scalability and Security
** Ideas
  | Concern                           | Type        | Proper Response                       |
  |-----------------------------------+-------------+---------------------------------------|
  | API calls to a invalid endpoint   | Security    |                                       |
  | API calls to non-exist collection | Security    |                                       |
  | API calls with invalid mongoQuery | Security    |                                       |
  | API calls with                    |             |                                       |
  |                                   | Security    | API Keys                              |
  |                                   | Security    | ssl certificates for https            |
  |                                   | Security    | Limit Amount of request per hour      |
  |                                   | Scalability | Pagination                            |
  |                                   | Both        | Set up Nginx Server in front of Flask |
  |                                   | Scalability | Limit Data achieved at time           |
  |                                   |             |                                       |
  |                                   |             |                                       |

** Resources
   - [[https://blog.restcase.com/rest-api-error-codes-101/][REST API Error Codes 101]]
** Backend Validation
   | Type        | End Point                    | Validation                                 | HTTP Error Code | Error Message                  |
   |-------------+------------------------------+--------------------------------------------+-----------------+--------------------------------|
   | URL Param   | <collection>?q=<mongoQuery>  | if <collection> in collectionList          |             400 | Collection Doesn't Exist       |
   | URL Param   | <collection>?q=<mongoQuery>  | if <mongoQuery> is not a valid Json object |             400 | mongoQuery is not a valid Json |
   | URL Param   | /<collection>/<id>           | if <collection> in collectionList          |             400 | Collection Doesn't Exist       |
   | Kill Switch |                              |                                            |                 |                                |
   |             | all other routes not defined | handled by flask by default                |             404 | Bad Request                    |

** Scalability


* Deployment
** Plan
   1) Set up MongoDB instance
   2) Create a Compute Engine, configure Flask and connect to the MongoDB instance
   3) Set up external IP for the Compute Engine

** Mongodb Instance
   1) Search Google Marketplace: [[https://console.cloud.google.com/marketplace/details/gc-launcher-for-mongodb-atlas/mongodb-atlas?q=mongo&id=1da5c047-e091-4ef3-bbbd-1e24a7c82a42&project=single-shadow-129207&folder&organizationId][MongoDB Atlas]]
   2) Follow this tutorial to set up Atlas [[https://cloud.google.com/community/tutorials/mongodb-atlas-appengineflex-nodejs-app][Hello World app - MongoDB Atlas and App Engine]]
   3) Import sample data in json dump to Atlas using [[https://cloud.mongodb.com/v2/5cf061b479358eca3f40a22d#clusters/commandLineTools/webServiceChallenge][Command Line Tools]]
	  #+begin_src shell
sudo mongoimport --host webServiceChallenge-shard-0/webservicechallenge-shard-00-00-1jjj8.gcp.mongodb.net:27017,webservicechallenge-shard-00-01-1jjj8.gcp.mongodb.net:27017,webservicechallenge-shard-00-02-1jjj8.gcp.mongodb.net:27017 --ssl --username admin --password pycqed-Vamqef-nypdu6 --authenticationDatabase admin --db sakila --collection stores --type json --file ~/Downloads/sakila/stores.json
	  #+end_src
** Test DB Connection in Python
   1) Use the connection string in "[[https://cloud.mongodb.com/v2/5cf061b479358eca3f40a22d#clusters/connect?clusterId=webServiceChallenge][Connect to your Application]]" , replace you password
	  #+begin_src python
client = pymongo.MongoClient("mongodb+srv://admin:<password>@webservicechallenge-1jjj8.gcp.mongodb.net/test?retryWrites=true&w=majority")
db = client.test
	  #+end_src
   2) Install DNS python in conda environment, since "srv" in the url uses it
   3) Run it and it works!
** Compute Engine with Flask and Nginx
   1) Search Google Tutorial on Flask & Compute Engine: [[https://cloud.google.com/python/tutorials/bookshelf-on-compute-engine][Running the Python Bookshelf on Compute Engine]]
   2) Create a VM instance with minimal configuration: Ubuntu 18.04; g1-small CPU;
   3) SSH and set up python environment
	  #+begin_src shell
# Clone the repo
$git clone https://github.com/ckwojai/webServiceChallenge
# Set up Conda [[https://www.digitalocean.com/community/tutorials/how-to-install-anaconda-on-ubuntu-18-04-quickstart][Digital Ocean]]
# This also set up Python 3.7
$cd /tmp
$curl -O https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh
$sha256sum Anaconda3-2019.03-Linux-x86_64.sh
$bash Anaconda3-2019.03-Linux-x86_64.sh
$source ~/.bashrc
$conda create --name webServiceChallenge python=3
$conda activate webServiceChallenge
$conda install --file requirements.txt
$python main.py
# This runs and open up development server
	  #+end_src
   4) Research setting up Gunicorn and Nginx in front of flask [[https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-14-04][Digital Ocean Tutorial]]
	  #+begin_src shell
# Create wsgi.app, then run the following
# Notes that WSGI server defaults to looking for the callable named "application"
$gunicorn --bind 0.0.0.0:8000 wsgi
	  #+end_src
   5) Set up Nginx, using tutorial in [[https://www.cyberciti.biz/faq/install-and-configure-nginx-on-ubuntu-linux-18-04-lts/][nix]]
	  #+begin_src shell
$sudo apt update
$sudo apt upgrade
$sudo apt install nginx
$sudo systemctl enable nginx
$sudo systemctl start nginx
	  #+end_src
   6) Configure Nginx for reverse proxy 80 to our flask App, with tutorials from [[https://www.linode.com/docs/web-servers/nginx/use-nginx-reverse-proxy/][Digital Ocean]]
	  #+LOCATION: /etc/nginx/sites-available/default
	  #+begin_src
server {
  listen 80;
  listen [::]:80;

#  server_name example.com;

  location / {
      proxy_pass http://localhost:3000/;
  }
}
	  #+end_src
* Resources (AKA things that I will use a lot)
** Mongodb CLI
   #+begin_src shell
# New Database
>use sakila
# New Collection
>db.createCollection('customers')
# Import json into DB; If collection doesn't exist, it will create new one
$mongoimport --db sakila --collection customers --file customers.json
   #+end_src
** Conda
   #+begin_src shell
$conda create -n webServiceChallenge python=3.7 anaconda
   #+end_src
** Kill Python Service
   #+begin_src shell
# Locate Python Service
$ps -fA | grep python
$kill 81651
   #+end_src
** Random
   - [[https://stackoverflow.com/questions/23821655/is-exposing-mongodb-query-over-rest-api-safe][Exposing Mongodb Query]]
