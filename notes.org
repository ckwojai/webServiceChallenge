* Requirement
** Restful API using Python or Java that performs a search
   1) The request should accept a search string as input.
   2) The data to be searched should be in a MongoDB database.
   3) The response should be formatted in JSON.
** The API should handle at least one scalability concern
** The API should handle at least one security concern.
** Good programming best practices / Ability to write Reusable Code / Testing Strategy
* Planning
** Local Testing
   - Set up Mongodb with sample data
   - Set up Flask Backend in Python
   - Connection between Flask and Mongodb
   - Design Search REST API and Research Best Practice (filtering)
   - Set up simple Angular Frontend App that interacts with Search API
** Scalability and Security
   - Research Scalability concern and Implementation
   - Research Security concern and Implementation
** Deployment
   - Set up Mongodb in Google VM instance
   - Deploy Flask backend in GCF that is able to connect to Mongodb in VM
   - Deploy Frontend in Stackblitz with GCF base URL above

* Local Testing Logs
** Set up Mongodb with Sample Data
  1) Research for Sample Data and Found [[https://medium.com/dbkoda/mongodb-sample-collections-52d6a7745908][MongoDB sample Collections]]
  2) Settle on Sakila DB
  3) Import .json files to Mongo DB
	 #+begin_src shell
# New Database
> use sakila
# New Collection
> db.createCollection('customers')
# Import json into DB; If collection doesn't exist, it will create new one
$ mongoimport --db sakila --collection customers --file customers.json
	 #+end_src
** Set up Flask Backend in Python
  1) Research and find Flask tutorial in [[https://medium.freecodecamp.org/how-to-build-a-web-application-using-flask-and-deploy-it-to-the-cloud-3551c985e492][freeCodeCamp]]
  2) Create new conda environemtn
     #+begin_src shell
$conda create -n webServiceChallenge python=3.7 anaconda
$conda activate webServiceChallenge
     #+end_src
  3) Create main.py, and run using the following shell command for auto-reload capability
	 #+begin_src shell
	 FLASK_APP=main.py FLASK_DEBUG=1 python -m flask run
	 #+end_src
** Connection between Flask and Mongodb
  1) Install PyMongo in Conda
  2) Create jupyter notebook to test connection
  3) Create simple testing code with instruction in [[https://api.mongodb.com/python/current/tutorial.html][PyMongo Documentation]]
	 #+begin_src python
from pymongo import MongoClient
client = MongoClient('localhost', 27017)

db = client['sakila']
customers = db['customers']

customers.find_one()
	 #+end_src
  4)

** Design Search REST API and Research Best Practice (filtering)
   - [[https://hackernoon.com/restful-api-design-step-by-step-guide-2f2c9f9fcdbf][Principle of Designing RESTful APIs from Hackermoon]]
   - Configure request handler in Flask to return json; also load url param into Json [[http://api.mongodb.com/python/current/api/bson/json_util.html][json_util man page]]
	 #+begin_src python
from bson.json_util import dumps, loads
@app.route("/<collection>")
def searchCollection(collection):
    q = loads(request.args.get('q'))
    print (q)
    docs = db[collection].find(q)
    return dumps(docs)
	 #+end_src
   - Initial API Design
	 | URL                          | Type | Description                                                  | Example                       |
	 |------------------------------+------+--------------------------------------------------------------+-------------------------------|
	 | /<collection>?q=<mongoQuery> | GET  | Fetch all docs in <collection> that matches the <mongoQuery> | /films/?q={"Tile": "Avenger"} |
	 | /<collection>/<id>           | GET  | Fetch specific doc in <collection> with specific <id>        | /customers/10                 |
	 | /keys/<collection>           | GET  | Fetch all keys names in top level from <collection>          | /keys/films                   |
	 |                              |      |                                                              |                               |

** Set up Simple Angular Frontend
   1) Reuse code from Augular Tour-of-hero Tutorial for Search Bar
   2) Set up Sakila Service
	  #+begin_src typescript
// In app.module.ts
import { HttpClientModule }    from '@angular/common/http';
// Import it in imports: array
// In sakila.service.ts
import { HttpClient, HttpHeaders } from '@angular/common/http';
// Inject HttpClient into the constructor in a private property called http.

	  #+end_src
   3) Follow Tutorial to set up search bar

* Deployment
** Plan
   1) Set up MongoDB instance
   2) Create a Compute Engine, configure Flask and connect to the MongoDB instance
   3) Set up external IP for the Compute Engine

** Mongodb Instance
   1) Search Google Marketplace: [[https://console.cloud.google.com/marketplace/details/gc-launcher-for-mongodb-atlas/mongodb-atlas?q=mongo&id=1da5c047-e091-4ef3-bbbd-1e24a7c82a42&project=single-shadow-129207&folder&organizationId][MongoDB Atlas]]
   2) Follow this tutorial to set up Atlas [[https://cloud.google.com/community/tutorials/mongodb-atlas-appengineflex-nodejs-app][Hello World app - MongoDB Atlas and App Engine]]
   3) Import sample data in json dump to Atlas using [[https://cloud.mongodb.com/v2/5cf061b479358eca3f40a22d#clusters/commandLineTools/webServiceChallenge][Command Line Tools]]
	  #+begin_src shell
sudo mongoimport --host webServiceChallenge-shard-0/webservicechallenge-shard-00-00-1jjj8.gcp.mongodb.net:27017,webservicechallenge-shard-00-01-1jjj8.gcp.mongodb.net:27017,webservicechallenge-shard-00-02-1jjj8.gcp.mongodb.net:27017 --ssl --username admin --password pycqed-Vamqef-nypdu6 --authenticationDatabase admin --db sakila --collection stores --type json --file ~/Downloads/sakila/stores.json
	  #+end_src
** Test DB Connection in Python
   1) Use the connection string in "[[https://cloud.mongodb.com/v2/5cf061b479358eca3f40a22d#clusters/connect?clusterId=webServiceChallenge][Connect to your Application]]" , replace you password
	  #+begin_src python
client = pymongo.MongoClient("mongodb+srv://admin:<password>@webservicechallenge-1jjj8.gcp.mongodb.net/test?retryWrites=true&w=majority")
db = client.test
	  #+end_src
   2) Install DNS python in conda environment, since "srv" in the url uses it
   3) Run it and it works!
** Compute Engine with Flask and Nginx
   1) Search Google Tutorial on Flask & Compute Engine: [[https://cloud.google.com/python/tutorials/bookshelf-on-compute-engine][Running the Python Bookshelf on Compute Engine]]
   2) Create a VM instance with minimal configuration: Ubuntu 18.04; g1-small CPU;
   3) SSH and set up python environment
	  #+begin_src shell
# Clone the repo
$git clone https://github.com/ckwojai/webServiceChallenge
# Set up Conda [[https://www.digitalocean.com/community/tutorials/how-to-install-anaconda-on-ubuntu-18-04-quickstart][Digital Ocean]]
# This also set up Python 3.7
$cd /tmp
$curl -O https://repo.anaconda.com/archive/Anaconda3-2019.03-Linux-x86_64.sh
$sha256sum Anaconda3-2019.03-Linux-x86_64.sh
$bash Anaconda3-2019.03-Linux-x86_64.sh
$source ~/.bashrc
$conda create --name webServiceChallenge python=3
$conda activate webServiceChallenge
$conda install --file requirements.txt
$python main.py
# This runs and open up development server
	  #+end_src
   4) Research setting up Gunicorn and Nginx in front of flask [[https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-14-04][Digital Ocean Tutorial]]
	  #+begin_src shell
# Create wsgi.app, then run the following
# Notes that WSGI server defaults to looking for the callable named "application"
$gunicorn --bind 0.0.0.0:8000 wsgi
	  #+end_src
   5) Set up Nginx, using tutorial in [[https://www.cyberciti.biz/faq/install-and-configure-nginx-on-ubuntu-linux-18-04-lts/][nix]]
	  #+begin_src shell
$sudo apt update
$sudo apt upgrade
$sudo apt install nginx
$sudo systemctl enable nginx
$sudo systemctl start nginx
	  #+end_src
   6) Configure Nginx for reverse proxy 80 to our flask App, with tutorials from [[https://www.linode.com/docs/web-servers/nginx/use-nginx-reverse-proxy/][Digital Ocean]]
	  #+LOCATION: /etc/nginx/sites-available/default
	  #+begin_src
server {
  listen 80;
  listen [::]:80;

#  server_name example.com;

  location / {
      proxy_pass http://localhost:3000/;
  }
}
	  #+end_src
* Scalability and Security
** Ideas
  | Concern                           | Type        | Proper Response                       |
  |-----------------------------------+-------------+---------------------------------------|
  | API calls to a invalid endpoint   | Security    |                                       |
  | API calls to non-exist collection | Security    |                                       |
  | API calls with invalid mongoQuery | Security    |                                       |
  | API calls with                    |             |                                       |
  |                                   | Security    | API Keys                              |
  |                                   | Security    | SSL certificates for https            |
  |                                   | Security    | Limit Amount of request per hour      |
  |                                   | Scalability | Pagination                            |
  |                                   | Both        | Set up Nginx Server in front of Flask |
  |                                   | Scalability | Limit Data achieved at time           |
  |                                   | Security    | Mongo Atlas IP Whitelist              |
  |                                   |             |                                       |

** Resources
   - [[https://blog.restcase.com/rest-api-error-codes-101/][REST API Error Codes 101]]
** Backend Validation
   | Type         | End Point                    | Validation                                 | HTTP Error Code | Error Message                                       |
   |--------------+------------------------------+--------------------------------------------+-----------------+-----------------------------------------------------|
   | URL Param    | <collection>?q=<mongoQuery>  | if <collection> in collectionList          |             400 | Collection Doesn't Exist                            |
   | URL Param    | <collection>?q=<mongoQuery>  | if <mongoQuery> is not a valid Json object |             400 | mongoQuery is not a valid Json                      |
   | URL Param    | /<collection>/<id>           | if <collection> in collectionList          |             400 | Collection Doesn't Exist                            |
   | Wrong Routes | all other routes not defined | handled by flask by default                |             404 | Bad Request                                         |
   | Kill Switch  | All                          | Using Try...Except                         |             500 | Error Retrieving Data... then display Error Message |

** Flask+Gunicorn+Nginx
   - Default Flask dev server serves only one request at a time; Gunicorn is a production WSGI server that is multi-thread enabled
   - Nginx is a more advanced reverse-proxy server with features for better scalability, such as more secure with SSL termination, load balancing, and so on
** Scalability

* Resources (AKA things that I will use a lot)
** Mongodb CLI
   #+begin_src shell
# New Database
>use sakila
# New Collection
>db.createCollection('customers')
# Import json into DB; If collection doesn't exist, it will create new one
$mongoimport --db sakila --collection customers --file customers.json
   #+end_src
** Conda
   #+begin_src shell
$conda create -n webServiceChallenge python=3.7 anaconda
   #+end_src
** Kill Python Service
   #+begin_src shell
# Locate Python Service
$ps -fA | grep python
$kill 81651
   #+end_src
** Random
   - [[https://stackoverflow.com/questions/23821655/is-exposing-mongodb-query-over-rest-api-safe][Exposing Mongodb Query]]

* Improvement
** New Table Component
* README.org
** Deliverable
   - [[https://stackblitz.com/edit/github-ttclkp][Stackblitz Editor Page]]
   - [[https://github-ttclkp.stackblitz.io][Stackblitz Live Page]]
** Requirement
*** Restful API using Python or Java that performs a search
   1) The request should accept a search string as input.
   2) The data to be searched should be in a MongoDB database.
   3) The response should be formatted in JSON.
*** The API should handle at least one scalability concern
*** The API should handle at least one security concern.
*** Good programming best practices / Ability to write Reusable Code / Testing Strategy
** Summary
*** Sample Database is set up with data from [[http://guyharrison.squarespace.com/blog/2015/3/23/sakila-sample-schema-in-mongodb.html][Sakila]]
	1) Sakila was a film-rental company
	2) Three collections: customers, films, stores
*** Backend is implemented in Flask, with connection to Mongodb using Pymongo
*** RESTful API Design
	 | URL                          | Type | Description                                                  | Example                        |
	 |------------------------------+------+--------------------------------------------------------------+--------------------------------|
	 | /<collection>?q=<mongoQuery> | GET  | Fetch all docs in <collection> that matches the <mongoQuery> | /films/?q={"Title": "Avenger"} |
	 | /<collection>/<id>           | GET  | Fetch specific doc in <collection> with specific <id>        | /customers/10                  |
	 | /keys/<collection>           | GET  | Fetch all keys names in top level from <collection>          | /keys/films                    |
*** Simple Angular Frontend
	1) Select Collection and associated search Keys will be available to select
	2) Input the search Query String, Angular will send an API request with mongoQuery as your type
	   #+begin_src typescript
// Use the /<collection>?q=<mongoQuery> API
var requestUrl: string = `${this.baseUrl}/${coltn}?q={"${key}": {"$regex": "^${term}.*", "$options": "-i"}}`;
	   #+end_src
	3) Relevant Results will be displayed in a Table
	4) Simple Error Handler if 404 Bad Request is returned from API
	   #+begin_src typescript
return this.http.get<any[]>(requestUrl).pipe(
catchError(this.handleError<any>('searchCollection', []))
);
	   #+end_src
*** Deployment
	1) Database hosted in MongoDB Atlas
	2) Flask+Gunicorn+Nginx configured inside Google Computer Engine, with domain name configured as [[https://webchallenge.kinchang.com]]
	3) Frontend hosted in [[https://stackblitz.com/edit/github-ttclkp][Stackblitz]]
*** Security Concerns
	1) Backend Data Validation
	   | Type         | End Point                    | Validation                                 | HTTP Error Code | Error Message                                       |
	   |--------------+------------------------------+--------------------------------------------+-----------------+-----------------------------------------------------|
	   | URL Param    | <collection>?q=<mongoQuery>  | if <collection> in collectionList          |             400 | Collection Doesn't Exist                            |
	   | URL Param    | <collection>?q=<mongoQuery>  | if <mongoQuery> is not a valid Json object |             400 | mongoQuery is not a valid Json                      |
	   | URL Param    | /<collection>/<id>           | if <collection> in collectionList          |             400 | Collection Doesn't Exist                            |
	   | Wrong Routes | all other routes not defined | handled by flask by default                |             404 | Bad Request                                         |
	   | Kill Switch  | All                          | Using Try...Except                         |             500 | Error Retrieving Data... then display Error Message |
	2) Configured in MongoDB Atlas, only White-listed IP (Google VM external IP), with correct credentials will have access to backend database
	3) The API is HTTPS-secured (avoid man-in-middle attack)
*** Scalability Concerns
	1) The Flask server is served with Gunicorn and then Nginx in the front, this brings various scalability benefits
	   - Default Flask dev server serves only one request at a time; Gunicorn is a production WSGI server that is multi-thread enabled
	   - Nginx is a more advanced reverse-proxy server with features for better scalability, such as more secure with SSL termination, load balancing, and so on
